// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: role.sql

package db

import (
	"context"
)

const addPermissionToRole = `-- name: AddPermissionToRole :one
UPDATE roles
SET permissions = array_append(permissions, $3)
WHERE organization_id = $1 AND id = $2
RETURNING id, organization_id, default_id, name, description, permissions, created_at, updated_at
`

type AddPermissionToRoleParams struct {
	OrganizationID string
	ID             string
	ArrayAppend    interface{}
}

func (q *Queries) AddPermissionToRole(ctx context.Context, arg AddPermissionToRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, addPermissionToRole, arg.OrganizationID, arg.ID, arg.ArrayAppend)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.DefaultID,
		&i.Name,
		&i.Description,
		&i.Permissions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const addRoleToUser = `-- name: AddRoleToUser :one
INSERT INTO roles_projects (
  project_id, role_id, user_id
) VALUES (
  $1, $2, $3
)
RETURNING id, role_id, project_id, user_id, created_at, updated_at
`

type AddRoleToUserParams struct {
	ProjectID string
	RoleID    string
	UserID    string
}

func (q *Queries) AddRoleToUser(ctx context.Context, arg AddRoleToUserParams) (RolesProject, error) {
	row := q.db.QueryRow(ctx, addRoleToUser, arg.ProjectID, arg.RoleID, arg.UserID)
	var i RolesProject
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.ProjectID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createRole = `-- name: CreateRole :one
INSERT INTO roles (
  organization_id, default_id, name, description, permissions
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, organization_id, default_id, name, description, permissions, created_at, updated_at
`

type CreateRoleParams struct {
	OrganizationID string
	DefaultID      *string
	Name           string
	Description    string
	Permissions    []string
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, createRole,
		arg.OrganizationID,
		arg.DefaultID,
		arg.Name,
		arg.Description,
		arg.Permissions,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.DefaultID,
		&i.Name,
		&i.Description,
		&i.Permissions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles
WHERE organization_id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, organizationID string) error {
	_, err := q.db.Exec(ctx, deleteRole, organizationID)
	return err
}

const getRole = `-- name: GetRole :one
SELECT id, organization_id, default_id, name, description, permissions, created_at, updated_at FROM roles
WHERE organization_id = $1 LIMIT 1
`

func (q *Queries) GetRole(ctx context.Context, organizationID string) (Role, error) {
	row := q.db.QueryRow(ctx, getRole, organizationID)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.DefaultID,
		&i.Name,
		&i.Description,
		&i.Permissions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRolesForOrganization = `-- name: GetRolesForOrganization :many
SELECT id, organization_id, default_id, name, description, permissions, created_at, updated_at FROM roles
WHERE organization_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetRolesForOrganization(ctx context.Context, organizationID string) ([]Role, error) {
	rows, err := q.db.Query(ctx, getRolesForOrganization, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.DefaultID,
			&i.Name,
			&i.Description,
			&i.Permissions,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRolesForProject = `-- name: GetRolesForProject :many
SELECT id, role_id, project_id, user_id, created_at, updated_at FROM roles_projects
WHERE project_id = $1
`

func (q *Queries) GetRolesForProject(ctx context.Context, projectID string) ([]RolesProject, error) {
	rows, err := q.db.Query(ctx, getRolesForProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RolesProject
	for rows.Next() {
		var i RolesProject
		if err := rows.Scan(
			&i.ID,
			&i.RoleID,
			&i.ProjectID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRolesForUser = `-- name: GetRolesForUser :many
SELECT roles.id, roles.organization_id, roles.default_id, roles.name, roles.description, roles.permissions, roles.created_at, roles.updated_at FROM roles_projects
JOIN roles on roles.id = roles_projects.role_id
WHERE roles_projects.user_id = $1 AND roles.organization_id = $2
`

type GetRolesForUserParams struct {
	UserID         string
	OrganizationID string
}

func (q *Queries) GetRolesForUser(ctx context.Context, arg GetRolesForUserParams) ([]Role, error) {
	rows, err := q.db.Query(ctx, getRolesForUser, arg.UserID, arg.OrganizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.DefaultID,
			&i.Name,
			&i.Description,
			&i.Permissions,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removePermissionFromRole = `-- name: RemovePermissionFromRole :exec
UPDATE roles
SET permissions = array_remove(permissions, $3)
WHERE organization_id = $1 AND id = $2
`

type RemovePermissionFromRoleParams struct {
	OrganizationID string
	ID             string
	ArrayRemove    interface{}
}

func (q *Queries) RemovePermissionFromRole(ctx context.Context, arg RemovePermissionFromRoleParams) error {
	_, err := q.db.Exec(ctx, removePermissionFromRole, arg.OrganizationID, arg.ID, arg.ArrayRemove)
	return err
}

const removeRoleFromUser = `-- name: RemoveRoleFromUser :exec
DELETE FROM roles_projects
WHERE project_id = $1 AND role_id = $2 AND user_id = $3
`

type RemoveRoleFromUserParams struct {
	ProjectID string
	RoleID    string
	UserID    string
}

func (q *Queries) RemoveRoleFromUser(ctx context.Context, arg RemoveRoleFromUserParams) error {
	_, err := q.db.Exec(ctx, removeRoleFromUser, arg.ProjectID, arg.RoleID, arg.UserID)
	return err
}

const updateRole = `-- name: UpdateRole :one
UPDATE roles
SET default_id = $2, name = $3, description = $4, permissions = $5
WHERE id = $1 AND organization_id = $6
RETURNING id, organization_id, default_id, name, description, permissions, created_at, updated_at
`

type UpdateRoleParams struct {
	ID             string
	DefaultID      *string
	Name           string
	Description    string
	Permissions    []string
	OrganizationID string
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, updateRole,
		arg.ID,
		arg.DefaultID,
		arg.Name,
		arg.Description,
		arg.Permissions,
		arg.OrganizationID,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.DefaultID,
		&i.Name,
		&i.Description,
		&i.Permissions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
