// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: projects.sql

package db

import (
	"context"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (
  user_id, organization_id, name, key_prefix, type
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, user_id, organization_id, name, key_prefix, type, created_at, updated_at
`

type CreateProjectParams struct {
	UserID         string
	OrganizationID string
	Name           string
	KeyPrefix      string
	Type           string
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject,
		arg.UserID,
		arg.OrganizationID,
		arg.Name,
		arg.KeyPrefix,
		arg.Type,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrganizationID,
		&i.Name,
		&i.KeyPrefix,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects
WHERE id = $1 AND user_id = $2
`

type DeleteProjectParams struct {
	ID     string
	UserID string
}

func (q *Queries) DeleteProject(ctx context.Context, arg DeleteProjectParams) error {
	_, err := q.db.Exec(ctx, deleteProject, arg.ID, arg.UserID)
	return err
}

const getProject = `-- name: GetProject :one
SELECT id, user_id, organization_id, name, key_prefix, type, created_at, updated_at FROM projects
WHERE id = $1 AND user_id = $2 LIMIT 1
`

type GetProjectParams struct {
	ID     string
	UserID string
}

func (q *Queries) GetProject(ctx context.Context, arg GetProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, getProject, arg.ID, arg.UserID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrganizationID,
		&i.Name,
		&i.KeyPrefix,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjectByKeyPrefix = `-- name: GetProjectByKeyPrefix :one
SELECT id, user_id, organization_id, name, key_prefix, type, created_at, updated_at FROM projects
WHERE key_prefix = $1
LIMIT 1
`

func (q *Queries) GetProjectByKeyPrefix(ctx context.Context, keyPrefix string) (Project, error) {
	row := q.db.QueryRow(ctx, getProjectByKeyPrefix, keyPrefix)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrganizationID,
		&i.Name,
		&i.KeyPrefix,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjectKeyPrefixUsed = `-- name: GetProjectKeyPrefixUsed :one
SELECT EXISTS (
    SELECT 1
    FROM projects
    WHERE projects.key_prefix = $1
)
`

func (q *Queries) GetProjectKeyPrefixUsed(ctx context.Context, keyPrefix string) (bool, error) {
	row := q.db.QueryRow(ctx, getProjectKeyPrefixUsed, keyPrefix)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getProjects = `-- name: GetProjects :many
SELECT id, user_id, organization_id, name, key_prefix, type, created_at, updated_at FROM projects
WHERE user_id = $1 AND organization_id = $2
ORDER BY created_at DESC
`

type GetProjectsParams struct {
	UserID         string
	OrganizationID string
}

func (q *Queries) GetProjects(ctx context.Context, arg GetProjectsParams) ([]Project, error) {
	rows, err := q.db.Query(ctx, getProjects, arg.UserID, arg.OrganizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrganizationID,
			&i.Name,
			&i.KeyPrefix,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
SET
  name = $2,
  key_prefix = $3
WHERE
  id = $1 AND user_id = $4
RETURNING id, user_id, organization_id, name, key_prefix, type, created_at, updated_at
`

type UpdateProjectParams struct {
	ID        string
	Name      string
	KeyPrefix string
	UserID    string
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProject,
		arg.ID,
		arg.Name,
		arg.KeyPrefix,
		arg.UserID,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrganizationID,
		&i.Name,
		&i.KeyPrefix,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
