// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tasks.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCommentAttachment = `-- name: CreateCommentAttachment :one
INSERT INTO comment_attachments (
  comment_id, user_id, file_name, file_path, file_size, mime_type
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, comment_id, user_id, file_name, file_path, file_size, mime_type, created_at, updated_at
`

type CreateCommentAttachmentParams struct {
	CommentID string
	UserID    string
	FileName  string
	FilePath  string
	FileSize  int64
	MimeType  string
}

func (q *Queries) CreateCommentAttachment(ctx context.Context, arg CreateCommentAttachmentParams) (CommentAttachment, error) {
	row := q.db.QueryRow(ctx, createCommentAttachment,
		arg.CommentID,
		arg.UserID,
		arg.FileName,
		arg.FilePath,
		arg.FileSize,
		arg.MimeType,
	)
	var i CommentAttachment
	err := row.Scan(
		&i.ID,
		&i.CommentID,
		&i.UserID,
		&i.FileName,
		&i.FilePath,
		&i.FileSize,
		&i.MimeType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
  user_id, assigner_id, reporter_id, organization_id, project_id, status_id, title, description, priority, due_date, order_index
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
RETURNING id, title, description, user_id, assigner_id, reporter_id, organization_id, project_id, status_id, priority, due_date, order_index, created_at, updated_at, deleted_at
`

type CreateTaskParams struct {
	UserID         string
	AssignerID     *string
	ReporterID     *string
	OrganizationID string
	ProjectID      string
	StatusID       string
	Title          string
	Description    *string
	Priority       int16
	DueDate        pgtype.Timestamp
	OrderIndex     *int32
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.UserID,
		arg.AssignerID,
		arg.ReporterID,
		arg.OrganizationID,
		arg.ProjectID,
		arg.StatusID,
		arg.Title,
		arg.Description,
		arg.Priority,
		arg.DueDate,
		arg.OrderIndex,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.UserID,
		&i.AssignerID,
		&i.ReporterID,
		&i.OrganizationID,
		&i.ProjectID,
		&i.StatusID,
		&i.Priority,
		&i.DueDate,
		&i.OrderIndex,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createTaskAssignee = `-- name: CreateTaskAssignee :one
INSERT INTO task_assignees (
  task_id, user_id
) VALUES (
  $1, $2
)
RETURNING id, task_id, user_id, created_at, updated_at
`

type CreateTaskAssigneeParams struct {
	TaskID string
	UserID string
}

func (q *Queries) CreateTaskAssignee(ctx context.Context, arg CreateTaskAssigneeParams) (TaskAssignee, error) {
	row := q.db.QueryRow(ctx, createTaskAssignee, arg.TaskID, arg.UserID)
	var i TaskAssignee
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createTaskAttachment = `-- name: CreateTaskAttachment :one
INSERT INTO task_attachments (
  task_id, user_id, file_name, file_path, file_size, mime_type
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, task_id, user_id, file_name, file_path, file_size, mime_type, created_at, updated_at
`

type CreateTaskAttachmentParams struct {
	TaskID   string
	UserID   string
	FileName string
	FilePath string
	FileSize int64
	MimeType string
}

func (q *Queries) CreateTaskAttachment(ctx context.Context, arg CreateTaskAttachmentParams) (TaskAttachment, error) {
	row := q.db.QueryRow(ctx, createTaskAttachment,
		arg.TaskID,
		arg.UserID,
		arg.FileName,
		arg.FilePath,
		arg.FileSize,
		arg.MimeType,
	)
	var i TaskAttachment
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.UserID,
		&i.FileName,
		&i.FilePath,
		&i.FileSize,
		&i.MimeType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createTaskComment = `-- name: CreateTaskComment :one
INSERT INTO task_comments (
  task_id, user_id, parent_comment_id, comment
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, task_id, user_id, parent_comment_id, comment, created_at, updated_at
`

type CreateTaskCommentParams struct {
	TaskID          string
	UserID          string
	ParentCommentID *string
	Comment         string
}

func (q *Queries) CreateTaskComment(ctx context.Context, arg CreateTaskCommentParams) (TaskComment, error) {
	row := q.db.QueryRow(ctx, createTaskComment,
		arg.TaskID,
		arg.UserID,
		arg.ParentCommentID,
		arg.Comment,
	)
	var i TaskComment
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.UserID,
		&i.ParentCommentID,
		&i.Comment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCommentAttachment = `-- name: DeleteCommentAttachment :exec
DELETE FROM comment_attachments
WHERE id = $1
`

func (q *Queries) DeleteCommentAttachment(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteCommentAttachment, id)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
UPDATE tasks
SET deleted_at = NOW()
WHERE id = $1
RETURNING id, title, description, user_id, assigner_id, reporter_id, organization_id, project_id, status_id, priority, due_date, order_index, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteTask(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const deleteTaskAssignee = `-- name: DeleteTaskAssignee :exec
DELETE FROM task_assignees
WHERE task_id = $1 AND user_id = $2
`

type DeleteTaskAssigneeParams struct {
	TaskID string
	UserID string
}

func (q *Queries) DeleteTaskAssignee(ctx context.Context, arg DeleteTaskAssigneeParams) error {
	_, err := q.db.Exec(ctx, deleteTaskAssignee, arg.TaskID, arg.UserID)
	return err
}

const deleteTaskAttachment = `-- name: DeleteTaskAttachment :exec
DELETE FROM task_attachments
WHERE id = $1
`

func (q *Queries) DeleteTaskAttachment(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteTaskAttachment, id)
	return err
}

const deleteTaskComment = `-- name: DeleteTaskComment :exec
DELETE FROM task_comments
WHERE id = $1
`

func (q *Queries) DeleteTaskComment(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteTaskComment, id)
	return err
}

const getCommentAttachments = `-- name: GetCommentAttachments :many
SELECT id, comment_id, user_id, file_name, file_path, file_size, mime_type, created_at, updated_at FROM comment_attachments
WHERE comment_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetCommentAttachments(ctx context.Context, commentID string) ([]CommentAttachment, error) {
	rows, err := q.db.Query(ctx, getCommentAttachments, commentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CommentAttachment
	for rows.Next() {
		var i CommentAttachment
		if err := rows.Scan(
			&i.ID,
			&i.CommentID,
			&i.UserID,
			&i.FileName,
			&i.FilePath,
			&i.FileSize,
			&i.MimeType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTask = `-- name: GetTask :one
SELECT id, title, description, user_id, assigner_id, reporter_id, organization_id, project_id, status_id, priority, due_date, order_index, created_at, updated_at, deleted_at FROM tasks
WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, id string) (Task, error) {
	row := q.db.QueryRow(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.UserID,
		&i.AssignerID,
		&i.ReporterID,
		&i.OrganizationID,
		&i.ProjectID,
		&i.StatusID,
		&i.Priority,
		&i.DueDate,
		&i.OrderIndex,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTaskAssignees = `-- name: GetTaskAssignees :many
SELECT id, task_id, user_id, created_at, updated_at FROM task_assignees
WHERE task_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetTaskAssignees(ctx context.Context, taskID string) ([]TaskAssignee, error) {
	rows, err := q.db.Query(ctx, getTaskAssignees, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaskAssignee
	for rows.Next() {
		var i TaskAssignee
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskAttachments = `-- name: GetTaskAttachments :many
SELECT id, task_id, user_id, file_name, file_path, file_size, mime_type, created_at, updated_at FROM task_attachments
WHERE task_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetTaskAttachments(ctx context.Context, taskID string) ([]TaskAttachment, error) {
	rows, err := q.db.Query(ctx, getTaskAttachments, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaskAttachment
	for rows.Next() {
		var i TaskAttachment
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.UserID,
			&i.FileName,
			&i.FilePath,
			&i.FileSize,
			&i.MimeType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskComments = `-- name: GetTaskComments :many
SELECT id, task_id, user_id, parent_comment_id, comment, created_at, updated_at FROM task_comments
WHERE task_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetTaskComments(ctx context.Context, taskID string) ([]TaskComment, error) {
	rows, err := q.db.Query(ctx, getTaskComments, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaskComment
	for rows.Next() {
		var i TaskComment
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.UserID,
			&i.ParentCommentID,
			&i.Comment,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasks = `-- name: GetTasks :many
SELECT id, title, description, user_id, assigner_id, reporter_id, organization_id, project_id, status_id, priority, due_date, order_index, created_at, updated_at, deleted_at FROM tasks
WHERE organization_id = $1 AND project_id = $2 AND deleted_at IS NULL
ORDER BY order_index ASC, created_at DESC
`

type GetTasksParams struct {
	OrganizationID string
	ProjectID      string
}

func (q *Queries) GetTasks(ctx context.Context, arg GetTasksParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasks, arg.OrganizationID, arg.ProjectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.UserID,
			&i.AssignerID,
			&i.ReporterID,
			&i.OrganizationID,
			&i.ProjectID,
			&i.StatusID,
			&i.Priority,
			&i.DueDate,
			&i.OrderIndex,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET user_id = $2, assigner_id = $3, reporter_id = $4, organization_id = $5, project_id = $6, status_id = $7,
    title = $8, description = $9, priority = $10, due_date = $11, order_index = $12, updated_at = NOW()
WHERE id = $1
RETURNING id, title, description, user_id, assigner_id, reporter_id, organization_id, project_id, status_id, priority, due_date, order_index, created_at, updated_at, deleted_at
`

type UpdateTaskParams struct {
	ID             string
	UserID         string
	AssignerID     *string
	ReporterID     *string
	OrganizationID string
	ProjectID      string
	StatusID       string
	Title          string
	Description    *string
	Priority       int16
	DueDate        pgtype.Timestamp
	OrderIndex     *int32
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTask,
		arg.ID,
		arg.UserID,
		arg.AssignerID,
		arg.ReporterID,
		arg.OrganizationID,
		arg.ProjectID,
		arg.StatusID,
		arg.Title,
		arg.Description,
		arg.Priority,
		arg.DueDate,
		arg.OrderIndex,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.UserID,
		&i.AssignerID,
		&i.ReporterID,
		&i.OrganizationID,
		&i.ProjectID,
		&i.StatusID,
		&i.Priority,
		&i.DueDate,
		&i.OrderIndex,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateTaskComment = `-- name: UpdateTaskComment :one
UPDATE task_comments
SET comment = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, task_id, user_id, parent_comment_id, comment, created_at, updated_at
`

type UpdateTaskCommentParams struct {
	ID      string
	Comment string
}

func (q *Queries) UpdateTaskComment(ctx context.Context, arg UpdateTaskCommentParams) (TaskComment, error) {
	row := q.db.QueryRow(ctx, updateTaskComment, arg.ID, arg.Comment)
	var i TaskComment
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.UserID,
		&i.ParentCommentID,
		&i.Comment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
