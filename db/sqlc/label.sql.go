// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: label.sql

package db

import (
	"context"
)

const createLabel = `-- name: CreateLabel :one
INSERT INTO labels (
  name, color, project_id, organization_id
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, name, color, project_id, organization_id, created_at, updated_at
`

type CreateLabelParams struct {
	Name           string
	Color          string
	ProjectID      string
	OrganizationID string
}

func (q *Queries) CreateLabel(ctx context.Context, arg CreateLabelParams) (Label, error) {
	row := q.db.QueryRow(ctx, createLabel,
		arg.Name,
		arg.Color,
		arg.ProjectID,
		arg.OrganizationID,
	)
	var i Label
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Color,
		&i.ProjectID,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLabel = `-- name: DeleteLabel :exec
DELETE FROM labels
WHERE id = $1 AND project_id = $2 AND organization_id = $3
`

type DeleteLabelParams struct {
	ID             string
	ProjectID      string
	OrganizationID string
}

func (q *Queries) DeleteLabel(ctx context.Context, arg DeleteLabelParams) error {
	_, err := q.db.Exec(ctx, deleteLabel, arg.ID, arg.ProjectID, arg.OrganizationID)
	return err
}

const getLabel = `-- name: GetLabel :one
SELECT id, name, color, project_id, organization_id, created_at, updated_at FROM labels
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLabel(ctx context.Context, id string) (Label, error) {
	row := q.db.QueryRow(ctx, getLabel, id)
	var i Label
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Color,
		&i.ProjectID,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLabels = `-- name: GetLabels :many
SELECT id, name, color, project_id, organization_id, created_at, updated_at FROM labels
WHERE project_id = $1 AND organization_id = $2
`

type GetLabelsParams struct {
	ProjectID      string
	OrganizationID string
}

func (q *Queries) GetLabels(ctx context.Context, arg GetLabelsParams) ([]Label, error) {
	rows, err := q.db.Query(ctx, getLabels, arg.ProjectID, arg.OrganizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Label
	for rows.Next() {
		var i Label
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Color,
			&i.ProjectID,
			&i.OrganizationID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLabel = `-- name: UpdateLabel :one
UPDATE labels
SET name = $2, color = $3, updated_at = NOW()
WHERE id = $1
RETURNING id, name, color, project_id, organization_id, created_at, updated_at
`

type UpdateLabelParams struct {
	ID    string
	Name  string
	Color string
}

func (q *Queries) UpdateLabel(ctx context.Context, arg UpdateLabelParams) (Label, error) {
	row := q.db.QueryRow(ctx, updateLabel, arg.ID, arg.Name, arg.Color)
	var i Label
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Color,
		&i.ProjectID,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
